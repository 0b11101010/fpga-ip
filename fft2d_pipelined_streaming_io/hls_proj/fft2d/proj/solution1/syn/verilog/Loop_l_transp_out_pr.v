// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_l_transp_out_pr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        xk_mid_col_fifo_V_dout,
        xk_mid_col_fifo_V_empty_n,
        xk_mid_col_fifo_V_read,
        arr1_address1,
        arr1_ce1,
        arr1_we1,
        arr1_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] xk_mid_col_fifo_V_dout;
input   xk_mid_col_fifo_V_empty_n;
output   xk_mid_col_fifo_V_read;
output  [9:0] arr1_address1;
output   arr1_ce1;
output   arr1_we1;
output  [63:0] arr1_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg xk_mid_col_fifo_V_read;
reg arr1_ce1;
reg arr1_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    xk_mid_col_fifo_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln168_reg_202;
reg   [10:0] indvar_flatten_reg_95;
reg   [5:0] i7_0_reg_106;
reg   [5:0] j8_0_reg_118;
wire   [0:0] icmp_ln168_fu_130_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln168_reg_202_pp0_iter1_reg;
wire   [10:0] add_ln168_fu_136_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln170_1_fu_162_p3;
reg   [5:0] select_ln170_1_reg_211;
wire   [9:0] index_fu_186_p2;
reg   [9:0] index_reg_216;
reg   [63:0] tmp_5_reg_221;
wire   [5:0] j_fu_192_p2;
reg   [5:0] j_reg_226;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg   [5:0] ap_phi_mux_i7_0_phi_fu_110_p4;
reg   [5:0] ap_phi_mux_j8_0_phi_fu_122_p4;
wire   [63:0] zext_ln175_fu_198_p1;
wire   [0:0] icmp_ln170_fu_142_p2;
wire   [5:0] add_ln168_1_fu_156_p2;
wire   [5:0] select_ln170_fu_148_p3;
wire   [4:0] trunc_ln174_fu_174_p1;
wire   [9:0] zext_ln170_fu_170_p1;
wire   [9:0] shl_ln_fu_178_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln168_reg_202_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        i7_0_reg_106 <= select_ln170_1_reg_211;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i7_0_reg_106 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln168_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_95 <= add_ln168_fu_136_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_95 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln168_reg_202_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        j8_0_reg_118 <= j_reg_226;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j8_0_reg_118 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln168_reg_202 <= icmp_ln168_fu_130_p2;
        icmp_ln168_reg_202_pp0_iter1_reg <= icmp_ln168_reg_202;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln168_reg_202 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_reg_216 <= index_fu_186_p2;
        tmp_5_reg_221 <= xk_mid_col_fifo_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln168_reg_202 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_226 <= j_fu_192_p2;
        select_ln170_1_reg_211 <= select_ln170_1_fu_162_p3;
    end
end

always @ (*) begin
    if ((icmp_ln168_fu_130_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln168_reg_202_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_i7_0_phi_fu_110_p4 = select_ln170_1_reg_211;
    end else begin
        ap_phi_mux_i7_0_phi_fu_110_p4 = i7_0_reg_106;
    end
end

always @ (*) begin
    if (((icmp_ln168_reg_202_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_j8_0_phi_fu_122_p4 = j_reg_226;
    end else begin
        ap_phi_mux_j8_0_phi_fu_122_p4 = j8_0_reg_118;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr1_ce1 = 1'b1;
    end else begin
        arr1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln168_reg_202_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr1_we1 = 1'b1;
    end else begin
        arr1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln168_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xk_mid_col_fifo_V_blk_n = xk_mid_col_fifo_V_empty_n;
    end else begin
        xk_mid_col_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln168_reg_202 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xk_mid_col_fifo_V_read = 1'b1;
    end else begin
        xk_mid_col_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln168_fu_130_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln168_fu_130_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln168_1_fu_156_p2 = (6'd1 + ap_phi_mux_i7_0_phi_fu_110_p4);

assign add_ln168_fu_136_p2 = (indvar_flatten_reg_95 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln168_reg_202 == 1'd0) & (xk_mid_col_fifo_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln168_reg_202 == 1'd0) & (xk_mid_col_fifo_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln168_reg_202 == 1'd0) & (xk_mid_col_fifo_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign arr1_address1 = zext_ln175_fu_198_p1;

assign arr1_d1 = tmp_5_reg_221;

assign icmp_ln168_fu_130_p2 = ((indvar_flatten_reg_95 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_142_p2 = ((ap_phi_mux_j8_0_phi_fu_122_p4 == 6'd32) ? 1'b1 : 1'b0);

assign index_fu_186_p2 = (zext_ln170_fu_170_p1 + shl_ln_fu_178_p3);

assign j_fu_192_p2 = (6'd1 + select_ln170_fu_148_p3);

assign select_ln170_1_fu_162_p3 = ((icmp_ln170_fu_142_p2[0:0] === 1'b1) ? add_ln168_1_fu_156_p2 : ap_phi_mux_i7_0_phi_fu_110_p4);

assign select_ln170_fu_148_p3 = ((icmp_ln170_fu_142_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_j8_0_phi_fu_122_p4);

assign shl_ln_fu_178_p3 = {{trunc_ln174_fu_174_p1}, {5'd0}};

assign trunc_ln174_fu_174_p1 = select_ln170_fu_148_p3[4:0];

assign zext_ln170_fu_170_p1 = select_ln170_1_fu_162_p3;

assign zext_ln175_fu_198_p1 = index_reg_216;

endmodule //Loop_l_transp_out_pr
