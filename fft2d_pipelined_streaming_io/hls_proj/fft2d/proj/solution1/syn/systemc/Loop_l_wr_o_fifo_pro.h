// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_l_wr_o_fifo_pro_HH_
#define _Loop_l_wr_o_fifo_pro_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_l_wr_o_fifo_pro : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<10> > arr1_address0;
    sc_out< sc_logic > arr1_ce0;
    sc_in< sc_lv<64> > arr1_q0;
    sc_out< sc_lv<64> > xk_fifo_V_din;
    sc_in< sc_logic > xk_fifo_V_full_n;
    sc_out< sc_logic > xk_fifo_V_write;


    // Module declarations
    Loop_l_wr_o_fifo_pro(sc_module_name name);
    SC_HAS_PROCESS(Loop_l_wr_o_fifo_pro);

    ~Loop_l_wr_o_fifo_pro();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > xk_fifo_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln180_reg_197;
    sc_signal< sc_lv<1> > icmp_ln180_reg_197_pp0_iter2_reg;
    sc_signal< sc_lv<11> > indvar_flatten_reg_92;
    sc_signal< sc_lv<6> > i10_0_reg_103;
    sc_signal< sc_lv<6> > j11_0_reg_114;
    sc_signal< sc_lv<1> > icmp_ln180_fu_125_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln180_reg_197_pp0_iter1_reg;
    sc_signal< sc_lv<11> > add_ln180_fu_131_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > select_ln186_1_fu_157_p3;
    sc_signal< sc_lv<6> > select_ln186_1_reg_206;
    sc_signal< sc_lv<10> > index_fu_181_p2;
    sc_signal< sc_lv<10> > index_reg_211;
    sc_signal< sc_lv<6> > j_fu_187_p2;
    sc_signal< sc_lv<64> > tmp_6_reg_226;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<6> > ap_phi_mux_i10_0_phi_fu_107_p4;
    sc_signal< sc_lv<64> > zext_ln187_fu_193_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln182_fu_137_p2;
    sc_signal< sc_lv<6> > add_ln180_1_fu_151_p2;
    sc_signal< sc_lv<5> > trunc_ln186_fu_165_p1;
    sc_signal< sc_lv<6> > select_ln186_fu_143_p3;
    sc_signal< sc_lv<10> > zext_ln186_fu_177_p1;
    sc_signal< sc_lv<10> > shl_ln186_mid2_fu_169_p3;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln180_1_fu_151_p2();
    void thread_add_ln180_fu_131_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i10_0_phi_fu_107_p4();
    void thread_ap_ready();
    void thread_arr1_address0();
    void thread_arr1_ce0();
    void thread_icmp_ln180_fu_125_p2();
    void thread_icmp_ln182_fu_137_p2();
    void thread_index_fu_181_p2();
    void thread_internal_ap_ready();
    void thread_j_fu_187_p2();
    void thread_real_start();
    void thread_select_ln186_1_fu_157_p3();
    void thread_select_ln186_fu_143_p3();
    void thread_shl_ln186_mid2_fu_169_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_trunc_ln186_fu_165_p1();
    void thread_xk_fifo_V_blk_n();
    void thread_xk_fifo_V_din();
    void thread_xk_fifo_V_write();
    void thread_zext_ln186_fu_177_p1();
    void thread_zext_ln187_fu_193_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
