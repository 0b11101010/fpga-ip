// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fft1d_0.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fft1d_0::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<64> fft1d_0::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_logic fft1d_0::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<2> fft1d_0::ap_const_lv2_0 = "00";
const sc_lv<2> fft1d_0::ap_const_lv2_1 = "1";
const bool fft1d_0::ap_const_boolean_1 = true;

fft1d_0::fft1d_0(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fft1d_0_Block_codeRe_U0 = new fft1d_0_Block_codeRe("fft1d_0_Block_codeRe_U0");
    fft1d_0_Block_codeRe_U0->ap_clk(ap_clk);
    fft1d_0_Block_codeRe_U0->ap_rst(ap_rst);
    fft1d_0_Block_codeRe_U0->ap_start(fft1d_0_Block_codeRe_U0_ap_start);
    fft1d_0_Block_codeRe_U0->start_full_n(fft1d_0_Block_codeRe_U0_start_full_n);
    fft1d_0_Block_codeRe_U0->ap_done(fft1d_0_Block_codeRe_U0_ap_done);
    fft1d_0_Block_codeRe_U0->ap_continue(fft1d_0_Block_codeRe_U0_ap_continue);
    fft1d_0_Block_codeRe_U0->ap_idle(fft1d_0_Block_codeRe_U0_ap_idle);
    fft1d_0_Block_codeRe_U0->ap_ready(fft1d_0_Block_codeRe_U0_ap_ready);
    fft1d_0_Block_codeRe_U0->start_out(fft1d_0_Block_codeRe_U0_start_out);
    fft1d_0_Block_codeRe_U0->start_write(fft1d_0_Block_codeRe_U0_start_write);
    fft1d_0_Block_codeRe_U0->config_data_V_1_din(fft1d_0_Block_codeRe_U0_config_data_V_1_din);
    fft1d_0_Block_codeRe_U0->config_data_V_1_full_n(config_data_V_1_chan_full_n);
    fft1d_0_Block_codeRe_U0->config_data_V_1_write(fft1d_0_Block_codeRe_U0_config_data_V_1_write);
    fft1d_0_Loop_1_proc2_U0 = new fft1d_0_Loop_1_proc2("fft1d_0_Loop_1_proc2_U0");
    fft1d_0_Loop_1_proc2_U0->ap_clk(ap_clk);
    fft1d_0_Loop_1_proc2_U0->ap_rst(ap_rst);
    fft1d_0_Loop_1_proc2_U0->ap_start(fft1d_0_Loop_1_proc2_U0_ap_start);
    fft1d_0_Loop_1_proc2_U0->ap_done(fft1d_0_Loop_1_proc2_U0_ap_done);
    fft1d_0_Loop_1_proc2_U0->ap_continue(fft1d_0_Loop_1_proc2_U0_ap_continue);
    fft1d_0_Loop_1_proc2_U0->ap_idle(fft1d_0_Loop_1_proc2_U0_ap_idle);
    fft1d_0_Loop_1_proc2_U0->ap_ready(fft1d_0_Loop_1_proc2_U0_ap_ready);
    fft1d_0_Loop_1_proc2_U0->in_V_dout(in_V_dout);
    fft1d_0_Loop_1_proc2_U0->in_V_empty_n(in_V_empty_n);
    fft1d_0_Loop_1_proc2_U0->in_V_read(fft1d_0_Loop_1_proc2_U0_in_V_read);
    fft1d_0_Loop_1_proc2_U0->xn_din(fft1d_0_Loop_1_proc2_U0_xn_din);
    fft1d_0_Loop_1_proc2_U0->xn_full_n(xn_channel_full_n);
    fft1d_0_Loop_1_proc2_U0->xn_write(fft1d_0_Loop_1_proc2_U0_xn_write);
    fft_configuration_1_U0 = new fft_configuration_1("fft_configuration_1_U0");
    fft_configuration_1_U0->ap_clk(ap_clk);
    fft_configuration_1_U0->ap_rst(ap_rst);
    fft_configuration_1_U0->ap_start(fft_configuration_1_U0_ap_start);
    fft_configuration_1_U0->ap_ce(ap_var_for_const0);
    fft_configuration_1_U0->ap_done(fft_configuration_1_U0_ap_done);
    fft_configuration_1_U0->ap_idle(fft_configuration_1_U0_ap_idle);
    fft_configuration_1_U0->ap_ready(fft_configuration_1_U0_ap_ready);
    fft_configuration_1_U0->ap_continue(fft_configuration_1_U0_ap_continue);
    fft_configuration_1_U0->xn_dout(xn_channel_dout);
    fft_configuration_1_U0->xn_empty_n(xn_channel_empty_n);
    fft_configuration_1_U0->xn_read(fft_configuration_1_U0_xn_read);
    fft_configuration_1_U0->xk_din(fft_configuration_1_U0_xk_din);
    fft_configuration_1_U0->xk_full_n(xk_channel_full_n);
    fft_configuration_1_U0->xk_write(fft_configuration_1_U0_xk_write);
    fft_configuration_1_U0->status_data_V_din(fft_configuration_1_U0_status_data_V_din);
    fft_configuration_1_U0->status_data_V_full_n(ap_var_for_const0);
    fft_configuration_1_U0->status_data_V_write(fft_configuration_1_U0_status_data_V_write);
    fft_configuration_1_U0->config_ch_data_V_dout(config_data_V_1_chan_dout);
    fft_configuration_1_U0->config_ch_data_V_empty_n(config_data_V_1_chan_empty_n);
    fft_configuration_1_U0->config_ch_data_V_read(fft_configuration_1_U0_config_ch_data_V_read);
    fft1d_0_Loop_2_proc2_U0 = new fft1d_0_Loop_2_proc2("fft1d_0_Loop_2_proc2_U0");
    fft1d_0_Loop_2_proc2_U0->ap_clk(ap_clk);
    fft1d_0_Loop_2_proc2_U0->ap_rst(ap_rst);
    fft1d_0_Loop_2_proc2_U0->ap_start(fft1d_0_Loop_2_proc2_U0_ap_start);
    fft1d_0_Loop_2_proc2_U0->ap_done(fft1d_0_Loop_2_proc2_U0_ap_done);
    fft1d_0_Loop_2_proc2_U0->ap_continue(fft1d_0_Loop_2_proc2_U0_ap_continue);
    fft1d_0_Loop_2_proc2_U0->ap_idle(fft1d_0_Loop_2_proc2_U0_ap_idle);
    fft1d_0_Loop_2_proc2_U0->ap_ready(fft1d_0_Loop_2_proc2_U0_ap_ready);
    fft1d_0_Loop_2_proc2_U0->xk_dout(xk_channel_dout);
    fft1d_0_Loop_2_proc2_U0->xk_empty_n(xk_channel_empty_n);
    fft1d_0_Loop_2_proc2_U0->xk_read(fft1d_0_Loop_2_proc2_U0_xk_read);
    fft1d_0_Loop_2_proc2_U0->out_V_din(fft1d_0_Loop_2_proc2_U0_out_V_din);
    fft1d_0_Loop_2_proc2_U0->out_V_full_n(out_V_full_n);
    fft1d_0_Loop_2_proc2_U0->out_V_write(fft1d_0_Loop_2_proc2_U0_out_V_write);
    config_data_V_1_chan_U = new fifo_w8_d2_A_x("config_data_V_1_chan_U");
    config_data_V_1_chan_U->clk(ap_clk);
    config_data_V_1_chan_U->reset(ap_rst);
    config_data_V_1_chan_U->if_read_ce(ap_var_for_const0);
    config_data_V_1_chan_U->if_write_ce(ap_var_for_const0);
    config_data_V_1_chan_U->if_din(fft1d_0_Block_codeRe_U0_config_data_V_1_din);
    config_data_V_1_chan_U->if_full_n(config_data_V_1_chan_full_n);
    config_data_V_1_chan_U->if_write(fft1d_0_Block_codeRe_U0_config_data_V_1_write);
    config_data_V_1_chan_U->if_dout(config_data_V_1_chan_dout);
    config_data_V_1_chan_U->if_empty_n(config_data_V_1_chan_empty_n);
    config_data_V_1_chan_U->if_read(fft_configuration_1_U0_config_ch_data_V_read);
    xn_channel_U = new fifo_w64_d32_A_x0("xn_channel_U");
    xn_channel_U->clk(ap_clk);
    xn_channel_U->reset(ap_rst);
    xn_channel_U->if_read_ce(ap_var_for_const0);
    xn_channel_U->if_write_ce(ap_var_for_const0);
    xn_channel_U->if_din(fft1d_0_Loop_1_proc2_U0_xn_din);
    xn_channel_U->if_full_n(xn_channel_full_n);
    xn_channel_U->if_write(fft1d_0_Loop_1_proc2_U0_xn_write);
    xn_channel_U->if_dout(xn_channel_dout);
    xn_channel_U->if_empty_n(xn_channel_empty_n);
    xn_channel_U->if_read(fft_configuration_1_U0_xn_read);
    xk_channel_U = new fifo_w64_d32_A_x0("xk_channel_U");
    xk_channel_U->clk(ap_clk);
    xk_channel_U->reset(ap_rst);
    xk_channel_U->if_read_ce(ap_var_for_const0);
    xk_channel_U->if_write_ce(ap_var_for_const0);
    xk_channel_U->if_din(fft_configuration_1_U0_xk_din);
    xk_channel_U->if_full_n(xk_channel_full_n);
    xk_channel_U->if_write(fft_configuration_1_U0_xk_write);
    xk_channel_U->if_dout(xk_channel_dout);
    xk_channel_U->if_empty_n(xk_channel_empty_n);
    xk_channel_U->if_read(fft1d_0_Loop_2_proc2_U0_xk_read);
    start_for_fft_configuration_1_U0_U = new start_for_fft_configuration_1_U0("start_for_fft_configuration_1_U0_U");
    start_for_fft_configuration_1_U0_U->clk(ap_clk);
    start_for_fft_configuration_1_U0_U->reset(ap_rst);
    start_for_fft_configuration_1_U0_U->if_read_ce(ap_var_for_const0);
    start_for_fft_configuration_1_U0_U->if_write_ce(ap_var_for_const0);
    start_for_fft_configuration_1_U0_U->if_din(start_for_fft_configuration_1_U0_din);
    start_for_fft_configuration_1_U0_U->if_full_n(start_for_fft_configuration_1_U0_full_n);
    start_for_fft_configuration_1_U0_U->if_write(fft1d_0_Block_codeRe_U0_start_write);
    start_for_fft_configuration_1_U0_U->if_dout(start_for_fft_configuration_1_U0_dout);
    start_for_fft_configuration_1_U0_U->if_empty_n(start_for_fft_configuration_1_U0_empty_n);
    start_for_fft_configuration_1_U0_U->if_read(fft_configuration_1_U0_ap_ready);
    start_for_fft1d_0_Loop_2_proc2_U0_U = new start_for_fft1d_0_Loop_2_proc2_U0("start_for_fft1d_0_Loop_2_proc2_U0_U");
    start_for_fft1d_0_Loop_2_proc2_U0_U->clk(ap_clk);
    start_for_fft1d_0_Loop_2_proc2_U0_U->reset(ap_rst);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_read_ce(ap_var_for_const0);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_write_ce(ap_var_for_const0);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_din(start_for_fft1d_0_Loop_2_proc2_U0_din);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_full_n(start_for_fft1d_0_Loop_2_proc2_U0_full_n);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_write(fft1d_0_Block_codeRe_U0_start_write);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_dout(start_for_fft1d_0_Loop_2_proc2_U0_dout);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_empty_n(start_for_fft1d_0_Loop_2_proc2_U0_empty_n);
    start_for_fft1d_0_Loop_2_proc2_U0_U->if_read(fft1d_0_Loop_2_proc2_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( fft1d_0_Loop_2_proc2_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( fft1d_0_Block_codeRe_U0_ap_idle );
    sensitive << ( fft1d_0_Loop_1_proc2_U0_ap_idle );
    sensitive << ( fft_configuration_1_U0_ap_idle );
    sensitive << ( fft1d_0_Loop_2_proc2_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( fft1d_0_Loop_2_proc2_U0_ap_done );

    SC_METHOD(thread_ap_sync_fft1d_0_Block_codeRe_U0_ap_ready);
    sensitive << ( fft1d_0_Block_codeRe_U0_ap_ready );
    sensitive << ( ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready );

    SC_METHOD(thread_ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready);
    sensitive << ( fft1d_0_Loop_1_proc2_U0_ap_ready );
    sensitive << ( ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_fft1d_0_Block_codeRe_U0_ap_ready );
    sensitive << ( ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready );

    SC_METHOD(thread_fft1d_0_Block_codeRe_U0_ap_continue);

    SC_METHOD(thread_fft1d_0_Block_codeRe_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready );

    SC_METHOD(thread_fft1d_0_Block_codeRe_U0_start_full_n);
    sensitive << ( start_for_fft_configuration_1_U0_full_n );
    sensitive << ( start_for_fft1d_0_Loop_2_proc2_U0_full_n );

    SC_METHOD(thread_fft1d_0_Loop_1_proc2_U0_ap_continue);

    SC_METHOD(thread_fft1d_0_Loop_1_proc2_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready );

    SC_METHOD(thread_fft1d_0_Loop_1_proc2_U0_start_full_n);

    SC_METHOD(thread_fft1d_0_Loop_1_proc2_U0_start_write);

    SC_METHOD(thread_fft1d_0_Loop_2_proc2_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_fft1d_0_Loop_2_proc2_U0_ap_start);
    sensitive << ( start_for_fft1d_0_Loop_2_proc2_U0_empty_n );

    SC_METHOD(thread_fft1d_0_Loop_2_proc2_U0_start_full_n);

    SC_METHOD(thread_fft1d_0_Loop_2_proc2_U0_start_write);

    SC_METHOD(thread_fft_configuration_1_U0_ap_continue);

    SC_METHOD(thread_fft_configuration_1_U0_ap_start);
    sensitive << ( start_for_fft_configuration_1_U0_empty_n );

    SC_METHOD(thread_fft_configuration_1_U0_start_full_n);

    SC_METHOD(thread_fft_configuration_1_U0_start_write);

    SC_METHOD(thread_in_V_read);
    sensitive << ( fft1d_0_Loop_1_proc2_U0_in_V_read );

    SC_METHOD(thread_out_V_din);
    sensitive << ( fft1d_0_Loop_2_proc2_U0_out_V_din );

    SC_METHOD(thread_out_V_write);
    sensitive << ( fft1d_0_Loop_2_proc2_U0_out_V_write );

    SC_METHOD(thread_start_for_fft1d_0_Loop_2_proc2_U0_din);

    SC_METHOD(thread_start_for_fft_configuration_1_U0_din);

    SC_THREAD(thread_ap_var_for_const0);

    ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready = SC_LOGIC_0;
    fft1d_0_Block_codeRe_U0_ap_ready_count = "00";
    ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready = SC_LOGIC_0;
    fft1d_0_Loop_1_proc2_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fft1d_0_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, in_V_dout, "(port)in_V_dout");
    sc_trace(mVcdFile, in_V_empty_n, "(port)in_V_empty_n");
    sc_trace(mVcdFile, in_V_read, "(port)in_V_read");
    sc_trace(mVcdFile, out_V_din, "(port)out_V_din");
    sc_trace(mVcdFile, out_V_full_n, "(port)out_V_full_n");
    sc_trace(mVcdFile, out_V_write, "(port)out_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_ap_start, "fft1d_0_Block_codeRe_U0_ap_start");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_start_full_n, "fft1d_0_Block_codeRe_U0_start_full_n");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_ap_done, "fft1d_0_Block_codeRe_U0_ap_done");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_ap_continue, "fft1d_0_Block_codeRe_U0_ap_continue");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_ap_idle, "fft1d_0_Block_codeRe_U0_ap_idle");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_ap_ready, "fft1d_0_Block_codeRe_U0_ap_ready");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_start_out, "fft1d_0_Block_codeRe_U0_start_out");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_start_write, "fft1d_0_Block_codeRe_U0_start_write");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_config_data_V_1_din, "fft1d_0_Block_codeRe_U0_config_data_V_1_din");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_config_data_V_1_write, "fft1d_0_Block_codeRe_U0_config_data_V_1_write");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_ap_start, "fft1d_0_Loop_1_proc2_U0_ap_start");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_ap_done, "fft1d_0_Loop_1_proc2_U0_ap_done");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_ap_continue, "fft1d_0_Loop_1_proc2_U0_ap_continue");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_ap_idle, "fft1d_0_Loop_1_proc2_U0_ap_idle");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_ap_ready, "fft1d_0_Loop_1_proc2_U0_ap_ready");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_in_V_read, "fft1d_0_Loop_1_proc2_U0_in_V_read");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_xn_din, "fft1d_0_Loop_1_proc2_U0_xn_din");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_xn_write, "fft1d_0_Loop_1_proc2_U0_xn_write");
    sc_trace(mVcdFile, fft_configuration_1_U0_ap_start, "fft_configuration_1_U0_ap_start");
    sc_trace(mVcdFile, fft_configuration_1_U0_ap_done, "fft_configuration_1_U0_ap_done");
    sc_trace(mVcdFile, fft_configuration_1_U0_ap_idle, "fft_configuration_1_U0_ap_idle");
    sc_trace(mVcdFile, fft_configuration_1_U0_ap_ready, "fft_configuration_1_U0_ap_ready");
    sc_trace(mVcdFile, fft_configuration_1_U0_ap_continue, "fft_configuration_1_U0_ap_continue");
    sc_trace(mVcdFile, fft_configuration_1_U0_xn_read, "fft_configuration_1_U0_xn_read");
    sc_trace(mVcdFile, fft_configuration_1_U0_xk_din, "fft_configuration_1_U0_xk_din");
    sc_trace(mVcdFile, fft_configuration_1_U0_xk_write, "fft_configuration_1_U0_xk_write");
    sc_trace(mVcdFile, fft_configuration_1_U0_status_data_V_din, "fft_configuration_1_U0_status_data_V_din");
    sc_trace(mVcdFile, fft_configuration_1_U0_status_data_V_write, "fft_configuration_1_U0_status_data_V_write");
    sc_trace(mVcdFile, fft_configuration_1_U0_config_ch_data_V_read, "fft_configuration_1_U0_config_ch_data_V_read");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_ap_start, "fft1d_0_Loop_2_proc2_U0_ap_start");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_ap_done, "fft1d_0_Loop_2_proc2_U0_ap_done");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_ap_continue, "fft1d_0_Loop_2_proc2_U0_ap_continue");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_ap_idle, "fft1d_0_Loop_2_proc2_U0_ap_idle");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_ap_ready, "fft1d_0_Loop_2_proc2_U0_ap_ready");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_xk_read, "fft1d_0_Loop_2_proc2_U0_xk_read");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_out_V_din, "fft1d_0_Loop_2_proc2_U0_out_V_din");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_out_V_write, "fft1d_0_Loop_2_proc2_U0_out_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, config_data_V_1_chan_full_n, "config_data_V_1_chan_full_n");
    sc_trace(mVcdFile, config_data_V_1_chan_dout, "config_data_V_1_chan_dout");
    sc_trace(mVcdFile, config_data_V_1_chan_empty_n, "config_data_V_1_chan_empty_n");
    sc_trace(mVcdFile, xn_channel_full_n, "xn_channel_full_n");
    sc_trace(mVcdFile, xn_channel_dout, "xn_channel_dout");
    sc_trace(mVcdFile, xn_channel_empty_n, "xn_channel_empty_n");
    sc_trace(mVcdFile, xk_channel_full_n, "xk_channel_full_n");
    sc_trace(mVcdFile, xk_channel_dout, "xk_channel_dout");
    sc_trace(mVcdFile, xk_channel_empty_n, "xk_channel_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready, "ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_fft1d_0_Block_codeRe_U0_ap_ready, "ap_sync_fft1d_0_Block_codeRe_U0_ap_ready");
    sc_trace(mVcdFile, fft1d_0_Block_codeRe_U0_ap_ready_count, "fft1d_0_Block_codeRe_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready, "ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready, "ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_ap_ready_count, "fft1d_0_Loop_1_proc2_U0_ap_ready_count");
    sc_trace(mVcdFile, start_for_fft_configuration_1_U0_din, "start_for_fft_configuration_1_U0_din");
    sc_trace(mVcdFile, start_for_fft_configuration_1_U0_full_n, "start_for_fft_configuration_1_U0_full_n");
    sc_trace(mVcdFile, start_for_fft_configuration_1_U0_dout, "start_for_fft_configuration_1_U0_dout");
    sc_trace(mVcdFile, start_for_fft_configuration_1_U0_empty_n, "start_for_fft_configuration_1_U0_empty_n");
    sc_trace(mVcdFile, start_for_fft1d_0_Loop_2_proc2_U0_din, "start_for_fft1d_0_Loop_2_proc2_U0_din");
    sc_trace(mVcdFile, start_for_fft1d_0_Loop_2_proc2_U0_full_n, "start_for_fft1d_0_Loop_2_proc2_U0_full_n");
    sc_trace(mVcdFile, start_for_fft1d_0_Loop_2_proc2_U0_dout, "start_for_fft1d_0_Loop_2_proc2_U0_dout");
    sc_trace(mVcdFile, start_for_fft1d_0_Loop_2_proc2_U0_empty_n, "start_for_fft1d_0_Loop_2_proc2_U0_empty_n");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_start_full_n, "fft1d_0_Loop_1_proc2_U0_start_full_n");
    sc_trace(mVcdFile, fft1d_0_Loop_1_proc2_U0_start_write, "fft1d_0_Loop_1_proc2_U0_start_write");
    sc_trace(mVcdFile, fft_configuration_1_U0_start_full_n, "fft_configuration_1_U0_start_full_n");
    sc_trace(mVcdFile, fft_configuration_1_U0_start_write, "fft_configuration_1_U0_start_write");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_start_full_n, "fft1d_0_Loop_2_proc2_U0_start_full_n");
    sc_trace(mVcdFile, fft1d_0_Loop_2_proc2_U0_start_write, "fft1d_0_Loop_2_proc2_U0_start_write");
#endif

    }
}

fft1d_0::~fft1d_0() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fft1d_0_Block_codeRe_U0;
    delete fft1d_0_Loop_1_proc2_U0;
    delete fft_configuration_1_U0;
    delete fft1d_0_Loop_2_proc2_U0;
    delete config_data_V_1_chan_U;
    delete xn_channel_U;
    delete xk_channel_U;
    delete start_for_fft_configuration_1_U0_U;
    delete start_for_fft1d_0_Loop_2_proc2_U0_U;
}

void fft1d_0::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fft1d_0::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready = ap_sync_fft1d_0_Block_codeRe_U0_ap_ready.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready = ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_0, fft1d_0_Block_codeRe_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        fft1d_0_Block_codeRe_U0_ap_ready_count = (!fft1d_0_Block_codeRe_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(fft1d_0_Block_codeRe_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(fft1d_0_Block_codeRe_U0_ap_ready.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        fft1d_0_Block_codeRe_U0_ap_ready_count = (!fft1d_0_Block_codeRe_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(fft1d_0_Block_codeRe_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, fft1d_0_Loop_1_proc2_U0_ap_ready.read()))) {
        fft1d_0_Loop_1_proc2_U0_ap_ready_count = (!fft1d_0_Loop_1_proc2_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(fft1d_0_Loop_1_proc2_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, fft1d_0_Loop_1_proc2_U0_ap_ready.read()))) {
        fft1d_0_Loop_1_proc2_U0_ap_ready_count = (!fft1d_0_Loop_1_proc2_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(fft1d_0_Loop_1_proc2_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
}

void fft1d_0::thread_ap_done() {
    ap_done = fft1d_0_Loop_2_proc2_U0_ap_done.read();
}

void fft1d_0::thread_ap_idle() {
    ap_idle = (fft1d_0_Block_codeRe_U0_ap_idle.read() & fft1d_0_Loop_1_proc2_U0_ap_idle.read() & fft_configuration_1_U0_ap_idle.read() & fft1d_0_Loop_2_proc2_U0_ap_idle.read());
}

void fft1d_0::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void fft1d_0::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void fft1d_0::thread_ap_sync_done() {
    ap_sync_done = fft1d_0_Loop_2_proc2_U0_ap_done.read();
}

void fft1d_0::thread_ap_sync_fft1d_0_Block_codeRe_U0_ap_ready() {
    ap_sync_fft1d_0_Block_codeRe_U0_ap_ready = (fft1d_0_Block_codeRe_U0_ap_ready.read() | ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready.read());
}

void fft1d_0::thread_ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready() {
    ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready = (fft1d_0_Loop_1_proc2_U0_ap_ready.read() | ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready.read());
}

void fft1d_0::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_fft1d_0_Block_codeRe_U0_ap_ready.read() & ap_sync_fft1d_0_Loop_1_proc2_U0_ap_ready.read());
}

void fft1d_0::thread_fft1d_0_Block_codeRe_U0_ap_continue() {
    fft1d_0_Block_codeRe_U0_ap_continue = ap_const_logic_1;
}

void fft1d_0::thread_fft1d_0_Block_codeRe_U0_ap_start() {
    fft1d_0_Block_codeRe_U0_ap_start = (ap_start.read() & (ap_sync_reg_fft1d_0_Block_codeRe_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void fft1d_0::thread_fft1d_0_Block_codeRe_U0_start_full_n() {
    fft1d_0_Block_codeRe_U0_start_full_n = (start_for_fft_configuration_1_U0_full_n.read() & start_for_fft1d_0_Loop_2_proc2_U0_full_n.read());
}

void fft1d_0::thread_fft1d_0_Loop_1_proc2_U0_ap_continue() {
    fft1d_0_Loop_1_proc2_U0_ap_continue = ap_const_logic_1;
}

void fft1d_0::thread_fft1d_0_Loop_1_proc2_U0_ap_start() {
    fft1d_0_Loop_1_proc2_U0_ap_start = (ap_start.read() & (ap_sync_reg_fft1d_0_Loop_1_proc2_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void fft1d_0::thread_fft1d_0_Loop_1_proc2_U0_start_full_n() {
    fft1d_0_Loop_1_proc2_U0_start_full_n = ap_const_logic_1;
}

void fft1d_0::thread_fft1d_0_Loop_1_proc2_U0_start_write() {
    fft1d_0_Loop_1_proc2_U0_start_write = ap_const_logic_0;
}

void fft1d_0::thread_fft1d_0_Loop_2_proc2_U0_ap_continue() {
    fft1d_0_Loop_2_proc2_U0_ap_continue = ap_continue.read();
}

void fft1d_0::thread_fft1d_0_Loop_2_proc2_U0_ap_start() {
    fft1d_0_Loop_2_proc2_U0_ap_start = start_for_fft1d_0_Loop_2_proc2_U0_empty_n.read();
}

void fft1d_0::thread_fft1d_0_Loop_2_proc2_U0_start_full_n() {
    fft1d_0_Loop_2_proc2_U0_start_full_n = ap_const_logic_1;
}

void fft1d_0::thread_fft1d_0_Loop_2_proc2_U0_start_write() {
    fft1d_0_Loop_2_proc2_U0_start_write = ap_const_logic_0;
}

void fft1d_0::thread_fft_configuration_1_U0_ap_continue() {
    fft_configuration_1_U0_ap_continue = ap_const_logic_1;
}

void fft1d_0::thread_fft_configuration_1_U0_ap_start() {
    fft_configuration_1_U0_ap_start = start_for_fft_configuration_1_U0_empty_n.read();
}

void fft1d_0::thread_fft_configuration_1_U0_start_full_n() {
    fft_configuration_1_U0_start_full_n = ap_const_logic_1;
}

void fft1d_0::thread_fft_configuration_1_U0_start_write() {
    fft_configuration_1_U0_start_write = ap_const_logic_0;
}

void fft1d_0::thread_in_V_read() {
    in_V_read = fft1d_0_Loop_1_proc2_U0_in_V_read.read();
}

void fft1d_0::thread_out_V_din() {
    out_V_din = fft1d_0_Loop_2_proc2_U0_out_V_din.read();
}

void fft1d_0::thread_out_V_write() {
    out_V_write = fft1d_0_Loop_2_proc2_U0_out_V_write.read();
}

void fft1d_0::thread_start_for_fft1d_0_Loop_2_proc2_U0_din() {
    start_for_fft1d_0_Loop_2_proc2_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void fft1d_0::thread_start_for_fft_configuration_1_U0_din() {
    start_for_fft_configuration_1_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

}

