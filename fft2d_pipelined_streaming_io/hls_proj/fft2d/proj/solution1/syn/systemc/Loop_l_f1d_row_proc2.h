// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_l_f1d_row_proc2_HH_
#define _Loop_l_f1d_row_proc2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fft1d_1.h"
#include "fifo_w64_d32_A_x.h"

namespace ap_rtl {

struct Loop_l_f1d_row_proc2 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<64> > xk_mid_row_fifo_V_din;
    sc_in< sc_logic > xk_mid_row_fifo_V_full_n;
    sc_out< sc_logic > xk_mid_row_fifo_V_write;
    sc_in< sc_lv<64> > xn_fifo_V_dout;
    sc_in< sc_logic > xn_fifo_V_empty_n;
    sc_out< sc_logic > xn_fifo_V_read;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Loop_l_f1d_row_proc2(sc_module_name name);
    SC_HAS_PROCESS(Loop_l_f1d_row_proc2);

    ~Loop_l_f1d_row_proc2();

    sc_trace_file* mVcdFile;

    fft1d_1* grp_fft1d_1_fu_125;
    fifo_w64_d32_A_x* xn_mid_row_fifo_V_fifo_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > xn_fifo_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln130_fu_144_p2;
    sc_signal< sc_lv<6> > i_fu_138_p2;
    sc_signal< sc_lv<6> > i_reg_165;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > j_fu_150_p2;
    sc_signal< sc_logic > xn_mid_row_fifo_V_full_n;
    sc_signal< sc_logic > xn_mid_row_fifo_V_write;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_in_V_read;
    sc_signal< sc_lv<64> > grp_fft1d_1_fu_125_out_V_din;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_out_V_write;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_ap_start;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_ap_done;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_ap_ready;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_ap_idle;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_ap_continue;
    sc_signal< sc_lv<6> > i1_0_reg_103;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_sync_grp_fft1d_1_fu_125_ap_ready;
    sc_signal< sc_logic > ap_sync_grp_fft1d_1_fu_125_ap_done;
    sc_signal< bool > ap_block_state4_on_subcall_done;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<6> > j_0_reg_114;
    sc_signal< sc_lv<1> > icmp_ln128_fu_132_p2;
    sc_signal< sc_logic > grp_fft1d_1_fu_125_ap_start_reg;
    sc_signal< bool > ap_block_state3_ignore_call0;
    sc_signal< sc_logic > ap_sync_reg_grp_fft1d_1_fu_125_ap_ready;
    sc_signal< sc_logic > ap_sync_reg_grp_fft1d_1_fu_125_ap_done;
    sc_signal< sc_lv<64> > xn_mid_row_fifo_V_dout;
    sc_signal< sc_logic > xn_mid_row_fifo_V_empty_n;
    sc_signal< sc_logic > xn_mid_row_fifo_V_read;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_block_state3_ignore_call0();
    void thread_ap_block_state4_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_grp_fft1d_1_fu_125_ap_done();
    void thread_ap_sync_grp_fft1d_1_fu_125_ap_ready();
    void thread_grp_fft1d_1_fu_125_ap_continue();
    void thread_grp_fft1d_1_fu_125_ap_start();
    void thread_i_fu_138_p2();
    void thread_icmp_ln128_fu_132_p2();
    void thread_icmp_ln130_fu_144_p2();
    void thread_internal_ap_ready();
    void thread_j_fu_150_p2();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_xk_mid_row_fifo_V_din();
    void thread_xk_mid_row_fifo_V_write();
    void thread_xn_fifo_V_blk_n();
    void thread_xn_fifo_V_read();
    void thread_xn_mid_row_fifo_V_read();
    void thread_xn_mid_row_fifo_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
