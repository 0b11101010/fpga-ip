// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_l_rd_xn_proc23.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_l_rd_xn_proc23::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_l_rd_xn_proc23::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Loop_l_rd_xn_proc23::ap_ST_fsm_state1 = "1";
const sc_lv<3> Loop_l_rd_xn_proc23::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> Loop_l_rd_xn_proc23::ap_ST_fsm_state4 = "100";
const bool Loop_l_rd_xn_proc23::ap_const_boolean_1 = true;
const sc_lv<32> Loop_l_rd_xn_proc23::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Loop_l_rd_xn_proc23::ap_const_lv1_0 = "0";
const sc_lv<1> Loop_l_rd_xn_proc23::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_l_rd_xn_proc23::ap_const_lv2_0 = "00";
const sc_lv<2> Loop_l_rd_xn_proc23::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_l_rd_xn_proc23::ap_const_lv2_3 = "11";
const sc_lv<2> Loop_l_rd_xn_proc23::ap_const_lv2_1 = "1";
const sc_lv<32> Loop_l_rd_xn_proc23::ap_const_lv32_1 = "1";
const bool Loop_l_rd_xn_proc23::ap_const_boolean_0 = false;
const sc_lv<11> Loop_l_rd_xn_proc23::ap_const_lv11_0 = "00000000000";
const sc_lv<11> Loop_l_rd_xn_proc23::ap_const_lv11_400 = "10000000000";
const sc_lv<11> Loop_l_rd_xn_proc23::ap_const_lv11_1 = "1";
const sc_lv<32> Loop_l_rd_xn_proc23::ap_const_lv32_2 = "10";

Loop_l_rd_xn_proc23::Loop_l_rd_xn_proc23(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( xn_data_0_vld_out );
    sensitive << ( xn_fifo_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln118_fu_90_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln118_reg_106 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( xn_data_0_vld_out );
    sensitive << ( xn_fifo_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln118_fu_90_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln118_reg_106 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( xn_data_0_vld_out );
    sensitive << ( xn_fifo_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln118_fu_90_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln118_reg_106 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( xn_data_0_vld_out );
    sensitive << ( icmp_ln118_fu_90_p2 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( xn_fifo_V_full_n );
    sensitive << ( icmp_ln118_reg_106 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln118_fu_90_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_i_fu_96_p2);
    sensitive << ( i_0_i_i_reg_79 );

    SC_METHOD(thread_icmp_ln118_fu_90_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_0_i_i_reg_79 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_xn_TDATA_blk_n);
    sensitive << ( xn_data_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln118_fu_90_p2 );

    SC_METHOD(thread_xn_TREADY);
    sensitive << ( xn_last_0_state );

    SC_METHOD(thread_xn_data_0_ack_in);
    sensitive << ( xn_data_0_state );

    SC_METHOD(thread_xn_data_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln118_fu_90_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_xn_data_0_data_out);
    sensitive << ( xn_data_0_payload_A );
    sensitive << ( xn_data_0_payload_B );
    sensitive << ( xn_data_0_sel );

    SC_METHOD(thread_xn_data_0_load_A);
    sensitive << ( xn_data_0_sel_wr );
    sensitive << ( xn_data_0_state_cmp_full );

    SC_METHOD(thread_xn_data_0_load_B);
    sensitive << ( xn_data_0_sel_wr );
    sensitive << ( xn_data_0_state_cmp_full );

    SC_METHOD(thread_xn_data_0_sel);
    sensitive << ( xn_data_0_sel_rd );

    SC_METHOD(thread_xn_data_0_state_cmp_full);
    sensitive << ( xn_data_0_state );

    SC_METHOD(thread_xn_data_0_vld_in);
    sensitive << ( xn_TVALID );

    SC_METHOD(thread_xn_data_0_vld_out);
    sensitive << ( xn_data_0_state );

    SC_METHOD(thread_xn_fifo_V_blk_n);
    sensitive << ( xn_fifo_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln118_reg_106 );

    SC_METHOD(thread_xn_fifo_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln118_reg_106 );
    sensitive << ( tmp_reg_115 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_xn_fifo_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln118_reg_106 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_xn_last_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln118_fu_90_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_xn_last_0_vld_in);
    sensitive << ( xn_TVALID );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln118_fu_90_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    xn_data_0_sel_rd = SC_LOGIC_0;
    xn_data_0_sel_wr = SC_LOGIC_0;
    xn_data_0_state = "00";
    xn_last_0_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_l_rd_xn_proc23_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, xn_TDATA, "(port)xn_TDATA");
    sc_trace(mVcdFile, xn_TVALID, "(port)xn_TVALID");
    sc_trace(mVcdFile, xn_TREADY, "(port)xn_TREADY");
    sc_trace(mVcdFile, xn_TLAST, "(port)xn_TLAST");
    sc_trace(mVcdFile, xn_fifo_V_din, "(port)xn_fifo_V_din");
    sc_trace(mVcdFile, xn_fifo_V_full_n, "(port)xn_fifo_V_full_n");
    sc_trace(mVcdFile, xn_fifo_V_write, "(port)xn_fifo_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, xn_data_0_data_out, "xn_data_0_data_out");
    sc_trace(mVcdFile, xn_data_0_vld_in, "xn_data_0_vld_in");
    sc_trace(mVcdFile, xn_data_0_vld_out, "xn_data_0_vld_out");
    sc_trace(mVcdFile, xn_data_0_ack_in, "xn_data_0_ack_in");
    sc_trace(mVcdFile, xn_data_0_ack_out, "xn_data_0_ack_out");
    sc_trace(mVcdFile, xn_data_0_payload_A, "xn_data_0_payload_A");
    sc_trace(mVcdFile, xn_data_0_payload_B, "xn_data_0_payload_B");
    sc_trace(mVcdFile, xn_data_0_sel_rd, "xn_data_0_sel_rd");
    sc_trace(mVcdFile, xn_data_0_sel_wr, "xn_data_0_sel_wr");
    sc_trace(mVcdFile, xn_data_0_sel, "xn_data_0_sel");
    sc_trace(mVcdFile, xn_data_0_load_A, "xn_data_0_load_A");
    sc_trace(mVcdFile, xn_data_0_load_B, "xn_data_0_load_B");
    sc_trace(mVcdFile, xn_data_0_state, "xn_data_0_state");
    sc_trace(mVcdFile, xn_data_0_state_cmp_full, "xn_data_0_state_cmp_full");
    sc_trace(mVcdFile, xn_last_0_vld_in, "xn_last_0_vld_in");
    sc_trace(mVcdFile, xn_last_0_ack_out, "xn_last_0_ack_out");
    sc_trace(mVcdFile, xn_last_0_state, "xn_last_0_state");
    sc_trace(mVcdFile, xn_TDATA_blk_n, "xn_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln118_fu_90_p2, "icmp_ln118_fu_90_p2");
    sc_trace(mVcdFile, xn_fifo_V_blk_n, "xn_fifo_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp_ln118_reg_106, "icmp_ln118_reg_106");
    sc_trace(mVcdFile, i_0_i_i_reg_79, "i_0_i_i_reg_79");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_96_p2, "i_fu_96_p2");
    sc_trace(mVcdFile, tmp_reg_115, "tmp_reg_115");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Loop_l_rd_xn_proc23::~Loop_l_rd_xn_proc23() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_l_rd_xn_proc23::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_i_i_reg_79 = i_fu_96_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_i_reg_79 = ap_const_lv11_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        xn_data_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_vld_out.read()))) {
            xn_data_0_sel_rd =  (sc_logic) (~xn_data_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        xn_data_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_ack_in.read()))) {
            xn_data_0_sel_wr =  (sc_logic) (~xn_data_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        xn_data_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_ack_out.read()) && 
              esl_seteq<1,2,2>(xn_data_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_vld_in.read()) && 
              esl_seteq<1,2,2>(xn_data_0_state.read(), ap_const_lv2_2)))) {
            xn_data_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(xn_data_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(xn_data_0_state.read(), ap_const_lv2_1)))) {
            xn_data_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(xn_data_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(xn_data_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(xn_data_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_ack_out.read()))))) {
            xn_data_0_state = ap_const_lv2_3;
        } else {
            xn_data_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        xn_last_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, xn_last_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, xn_last_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, xn_last_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, xn_last_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, xn_last_0_state.read())))) {
            xn_last_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, xn_last_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, xn_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, xn_last_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, xn_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, xn_last_0_state.read())))) {
            xn_last_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, xn_last_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, xn_last_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, xn_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, xn_last_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, xn_last_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, xn_last_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, xn_last_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, xn_last_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, xn_last_0_ack_out.read()))))) {
            xn_last_0_state = ap_const_lv2_3;
        } else {
            xn_last_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln118_reg_106 = icmp_ln118_fu_90_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_115 = xn_data_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_load_A.read())) {
        xn_data_0_payload_A = xn_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_load_B.read())) {
        xn_data_0_payload_B = xn_TDATA.read();
    }
}

void Loop_l_rd_xn_proc23::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Loop_l_rd_xn_proc23::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_l_rd_xn_proc23::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void Loop_l_rd_xn_proc23::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_l_rd_xn_proc23::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_reg_106.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, xn_fifo_V_full_n.read())));
}

void Loop_l_rd_xn_proc23::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_reg_106.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, xn_fifo_V_full_n.read())));
}

void Loop_l_rd_xn_proc23::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_reg_106.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, xn_fifo_V_full_n.read())));
}

void Loop_l_rd_xn_proc23::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_l_rd_xn_proc23::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, xn_data_0_vld_out.read()));
}

void Loop_l_rd_xn_proc23::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_reg_106.read()) && esl_seteq<1,1,1>(ap_const_logic_0, xn_fifo_V_full_n.read()));
}

void Loop_l_rd_xn_proc23::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln118_fu_90_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_l_rd_xn_proc23::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_l_rd_xn_proc23::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void Loop_l_rd_xn_proc23::thread_i_fu_96_p2() {
    i_fu_96_p2 = (!i_0_i_i_reg_79.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_i_i_reg_79.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void Loop_l_rd_xn_proc23::thread_icmp_ln118_fu_90_p2() {
    icmp_ln118_fu_90_p2 = (!i_0_i_i_reg_79.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_79.read() == ap_const_lv11_400);
}

void Loop_l_rd_xn_proc23::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void Loop_l_rd_xn_proc23::thread_start_out() {
    start_out = real_start.read();
}

void Loop_l_rd_xn_proc23::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_xn_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()))) {
        xn_TDATA_blk_n = xn_data_0_state.read()[0];
    } else {
        xn_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_l_rd_xn_proc23::thread_xn_TREADY() {
    xn_TREADY = xn_last_0_state.read()[1];
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_ack_in() {
    xn_data_0_ack_in = xn_data_0_state.read()[1];
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        xn_data_0_ack_out = ap_const_logic_1;
    } else {
        xn_data_0_ack_out = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, xn_data_0_sel.read())) {
        xn_data_0_data_out = xn_data_0_payload_B.read();
    } else {
        xn_data_0_data_out = xn_data_0_payload_A.read();
    }
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_load_A() {
    xn_data_0_load_A = (xn_data_0_state_cmp_full.read() & ~xn_data_0_sel_wr.read());
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_load_B() {
    xn_data_0_load_B = (xn_data_0_sel_wr.read() & xn_data_0_state_cmp_full.read());
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_sel() {
    xn_data_0_sel = xn_data_0_sel_rd.read();
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_state_cmp_full() {
    xn_data_0_state_cmp_full =  (sc_logic) ((!xn_data_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(xn_data_0_state.read() != ap_const_lv2_1))[0];
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_vld_in() {
    xn_data_0_vld_in = xn_TVALID.read();
}

void Loop_l_rd_xn_proc23::thread_xn_data_0_vld_out() {
    xn_data_0_vld_out = xn_data_0_state.read()[0];
}

void Loop_l_rd_xn_proc23::thread_xn_fifo_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_reg_106.read()))) {
        xn_fifo_V_blk_n = xn_fifo_V_full_n.read();
    } else {
        xn_fifo_V_blk_n = ap_const_logic_1;
    }
}

void Loop_l_rd_xn_proc23::thread_xn_fifo_V_din() {
    xn_fifo_V_din = tmp_reg_115.read();
}

void Loop_l_rd_xn_proc23::thread_xn_fifo_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_reg_106.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        xn_fifo_V_write = ap_const_logic_1;
    } else {
        xn_fifo_V_write = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_xn_last_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln118_fu_90_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        xn_last_0_ack_out = ap_const_logic_1;
    } else {
        xn_last_0_ack_out = ap_const_logic_0;
    }
}

void Loop_l_rd_xn_proc23::thread_xn_last_0_vld_in() {
    xn_last_0_vld_in = xn_TVALID.read();
}

void Loop_l_rd_xn_proc23::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln118_fu_90_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln118_fu_90_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

