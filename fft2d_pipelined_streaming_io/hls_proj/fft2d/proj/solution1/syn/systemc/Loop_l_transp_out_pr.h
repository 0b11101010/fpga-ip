// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_l_transp_out_pr_HH_
#define _Loop_l_transp_out_pr_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_l_transp_out_pr : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > xk_mid_col_fifo_V_dout;
    sc_in< sc_logic > xk_mid_col_fifo_V_empty_n;
    sc_out< sc_logic > xk_mid_col_fifo_V_read;
    sc_out< sc_lv<10> > arr1_address1;
    sc_out< sc_logic > arr1_ce1;
    sc_out< sc_logic > arr1_we1;
    sc_out< sc_lv<64> > arr1_d1;


    // Module declarations
    Loop_l_transp_out_pr(sc_module_name name);
    SC_HAS_PROCESS(Loop_l_transp_out_pr);

    ~Loop_l_transp_out_pr();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > xk_mid_col_fifo_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln168_reg_202;
    sc_signal< sc_lv<11> > indvar_flatten_reg_95;
    sc_signal< sc_lv<6> > i7_0_reg_106;
    sc_signal< sc_lv<6> > j8_0_reg_118;
    sc_signal< sc_lv<1> > icmp_ln168_fu_130_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln168_reg_202_pp0_iter1_reg;
    sc_signal< sc_lv<11> > add_ln168_fu_136_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > select_ln170_1_fu_162_p3;
    sc_signal< sc_lv<6> > select_ln170_1_reg_211;
    sc_signal< sc_lv<10> > index_fu_186_p2;
    sc_signal< sc_lv<10> > index_reg_216;
    sc_signal< sc_lv<64> > tmp_5_reg_221;
    sc_signal< sc_lv<6> > j_fu_192_p2;
    sc_signal< sc_lv<6> > j_reg_226;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<6> > ap_phi_mux_i7_0_phi_fu_110_p4;
    sc_signal< sc_lv<6> > ap_phi_mux_j8_0_phi_fu_122_p4;
    sc_signal< sc_lv<64> > zext_ln175_fu_198_p1;
    sc_signal< sc_lv<1> > icmp_ln170_fu_142_p2;
    sc_signal< sc_lv<6> > add_ln168_1_fu_156_p2;
    sc_signal< sc_lv<6> > select_ln170_fu_148_p3;
    sc_signal< sc_lv<5> > trunc_ln174_fu_174_p1;
    sc_signal< sc_lv<10> > zext_ln170_fu_170_p1;
    sc_signal< sc_lv<10> > shl_ln_fu_178_p3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln168_1_fu_156_p2();
    void thread_add_ln168_fu_136_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i7_0_phi_fu_110_p4();
    void thread_ap_phi_mux_j8_0_phi_fu_122_p4();
    void thread_ap_ready();
    void thread_arr1_address1();
    void thread_arr1_ce1();
    void thread_arr1_d1();
    void thread_arr1_we1();
    void thread_icmp_ln168_fu_130_p2();
    void thread_icmp_ln170_fu_142_p2();
    void thread_index_fu_186_p2();
    void thread_j_fu_192_p2();
    void thread_select_ln170_1_fu_162_p3();
    void thread_select_ln170_fu_148_p3();
    void thread_shl_ln_fu_178_p3();
    void thread_trunc_ln174_fu_174_p1();
    void thread_xk_mid_col_fifo_V_blk_n();
    void thread_xk_mid_col_fifo_V_read();
    void thread_zext_ln170_fu_170_p1();
    void thread_zext_ln175_fu_198_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
