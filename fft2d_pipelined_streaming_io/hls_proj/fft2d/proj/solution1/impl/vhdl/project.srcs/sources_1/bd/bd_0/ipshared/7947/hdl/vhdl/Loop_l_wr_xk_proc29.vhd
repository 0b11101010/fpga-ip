-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_l_wr_xk_proc29 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xk_fifo_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    xk_fifo_V_empty_n : IN STD_LOGIC;
    xk_fifo_V_read : OUT STD_LOGIC;
    xk_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    xk_TVALID : OUT STD_LOGIC;
    xk_TREADY : IN STD_LOGIC;
    xk_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_l_wr_xk_proc29 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xk_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal xk_data_1_vld_in : STD_LOGIC;
    signal xk_data_1_vld_out : STD_LOGIC;
    signal xk_data_1_ack_in : STD_LOGIC;
    signal xk_data_1_ack_out : STD_LOGIC;
    signal xk_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal xk_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal xk_data_1_sel_rd : STD_LOGIC := '0';
    signal xk_data_1_sel_wr : STD_LOGIC := '0';
    signal xk_data_1_sel : STD_LOGIC;
    signal xk_data_1_load_A : STD_LOGIC;
    signal xk_data_1_load_B : STD_LOGIC;
    signal xk_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xk_data_1_state_cmp_full : STD_LOGIC;
    signal xk_last_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal xk_last_1_vld_in : STD_LOGIC;
    signal xk_last_1_vld_out : STD_LOGIC;
    signal xk_last_1_ack_in : STD_LOGIC;
    signal xk_last_1_ack_out : STD_LOGIC;
    signal xk_last_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal xk_last_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal xk_last_1_sel_rd : STD_LOGIC := '0';
    signal xk_last_1_sel_wr : STD_LOGIC := '0';
    signal xk_last_1_sel : STD_LOGIC;
    signal xk_last_1_load_A : STD_LOGIC;
    signal xk_last_1_load_B : STD_LOGIC;
    signal xk_last_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xk_last_1_state_cmp_full : STD_LOGIC;
    signal xk_fifo_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln192_reg_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal xk_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln192_reg_112_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i13_0_reg_83 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln192_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_100_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln198_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_reg_121 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((xk_last_1_state = ap_const_lv2_1) or (xk_data_1_state = ap_const_lv2_1) or ((xk_data_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)) or ((xk_last_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    xk_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xk_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((xk_data_1_ack_out = ap_const_logic_1) and (xk_data_1_vld_out = ap_const_logic_1))) then 
                                        xk_data_1_sel_rd <= not(xk_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xk_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xk_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((xk_data_1_ack_in = ap_const_logic_1) and (xk_data_1_vld_in = ap_const_logic_1))) then 
                                        xk_data_1_sel_wr <= not(xk_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xk_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xk_data_1_state <= ap_const_lv2_0;
            else
                if ((((xk_data_1_state = ap_const_lv2_2) and (xk_data_1_vld_in = ap_const_logic_0)) or ((xk_data_1_state = ap_const_lv2_3) and (xk_data_1_vld_in = ap_const_logic_0) and (xk_data_1_ack_out = ap_const_logic_1)))) then 
                    xk_data_1_state <= ap_const_lv2_2;
                elsif ((((xk_data_1_state = ap_const_lv2_1) and (xk_TREADY = ap_const_logic_0)) or ((xk_data_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0) and (xk_data_1_vld_in = ap_const_logic_1)))) then 
                    xk_data_1_state <= ap_const_lv2_1;
                elsif (((not(((xk_data_1_vld_in = ap_const_logic_0) and (xk_data_1_ack_out = ap_const_logic_1))) and not(((xk_TREADY = ap_const_logic_0) and (xk_data_1_vld_in = ap_const_logic_1))) and (xk_data_1_state = ap_const_lv2_3)) or ((xk_data_1_state = ap_const_lv2_1) and (xk_data_1_ack_out = ap_const_logic_1)) or ((xk_data_1_state = ap_const_lv2_2) and (xk_data_1_vld_in = ap_const_logic_1)))) then 
                    xk_data_1_state <= ap_const_lv2_3;
                else 
                    xk_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xk_last_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xk_last_1_sel_rd <= ap_const_logic_0;
            else
                if (((xk_last_1_ack_out = ap_const_logic_1) and (xk_last_1_vld_out = ap_const_logic_1))) then 
                                        xk_last_1_sel_rd <= not(xk_last_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xk_last_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xk_last_1_sel_wr <= ap_const_logic_0;
            else
                if (((xk_last_1_ack_in = ap_const_logic_1) and (xk_last_1_vld_in = ap_const_logic_1))) then 
                                        xk_last_1_sel_wr <= not(xk_last_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xk_last_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                xk_last_1_state <= ap_const_lv2_0;
            else
                if ((((xk_last_1_state = ap_const_lv2_2) and (xk_last_1_vld_in = ap_const_logic_0)) or ((xk_last_1_state = ap_const_lv2_3) and (xk_last_1_vld_in = ap_const_logic_0) and (xk_last_1_ack_out = ap_const_logic_1)))) then 
                    xk_last_1_state <= ap_const_lv2_2;
                elsif ((((xk_last_1_state = ap_const_lv2_1) and (xk_TREADY = ap_const_logic_0)) or ((xk_last_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0) and (xk_last_1_vld_in = ap_const_logic_1)))) then 
                    xk_last_1_state <= ap_const_lv2_1;
                elsif (((not(((xk_last_1_vld_in = ap_const_logic_0) and (xk_last_1_ack_out = ap_const_logic_1))) and not(((xk_TREADY = ap_const_logic_0) and (xk_last_1_vld_in = ap_const_logic_1))) and (xk_last_1_state = ap_const_lv2_3)) or ((xk_last_1_state = ap_const_lv2_1) and (xk_last_1_ack_out = ap_const_logic_1)) or ((xk_last_1_state = ap_const_lv2_2) and (xk_last_1_vld_in = ap_const_logic_1)))) then 
                    xk_last_1_state <= ap_const_lv2_3;
                else 
                    xk_last_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i13_0_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i13_0_reg_83 <= ap_const_lv11_0;
            elsif (((icmp_ln192_fu_94_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i13_0_reg_83 <= i_fu_100_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln192_reg_112 <= icmp_ln192_fu_94_p2;
                icmp_ln192_reg_112_pp0_iter1_reg <= icmp_ln192_reg_112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_94_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln198_reg_121 <= icmp_ln198_fu_106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xk_data_1_load_A = ap_const_logic_1)) then
                xk_data_1_payload_A <= xk_fifo_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xk_data_1_load_B = ap_const_logic_1)) then
                xk_data_1_payload_B <= xk_fifo_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xk_last_1_load_A = ap_const_logic_1)) then
                xk_last_1_payload_A <= icmp_ln198_reg_121;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xk_last_1_load_B = ap_const_logic_1)) then
                xk_last_1_payload_B <= icmp_ln198_reg_121;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, xk_TREADY, xk_data_1_state, xk_last_1_state, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln192_fu_94_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln192_fu_94_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln192_fu_94_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((xk_last_1_state = ap_const_lv2_1) or (xk_data_1_state = ap_const_lv2_1) or ((xk_data_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)) or ((xk_last_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(xk_fifo_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln192_reg_112)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln192_reg_112 = ap_const_lv1_0) and (xk_fifo_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(xk_fifo_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln192_reg_112, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln192_reg_112 = ap_const_lv1_0) and (xk_fifo_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(xk_fifo_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln192_reg_112, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln192_reg_112 = ap_const_lv1_0) and (xk_fifo_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(xk_last_1_ack_in, icmp_ln192_reg_112)
    begin
                ap_block_state3_io <= ((icmp_ln192_reg_112 = ap_const_lv1_0) and (xk_last_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(xk_fifo_V_empty_n, icmp_ln192_reg_112)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln192_reg_112 = ap_const_lv1_0) and (xk_fifo_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(xk_last_1_ack_in, icmp_ln192_reg_112_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln192_reg_112_pp0_iter1_reg = ap_const_lv1_0) and (xk_last_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(xk_TREADY, xk_data_1_state, xk_last_1_state)
    begin
                ap_block_state5 <= ((xk_last_1_state = ap_const_lv2_1) or (xk_data_1_state = ap_const_lv2_1) or ((xk_data_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)) or ((xk_last_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln192_fu_94_p2)
    begin
        if ((icmp_ln192_fu_94_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, xk_TREADY, xk_data_1_state, xk_last_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((xk_last_1_state = ap_const_lv2_1) or (xk_data_1_state = ap_const_lv2_1) or ((xk_data_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)) or ((xk_last_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(xk_TREADY, xk_data_1_state, xk_last_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((xk_last_1_state = ap_const_lv2_1) or (xk_data_1_state = ap_const_lv2_1) or ((xk_data_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)) or ((xk_last_1_state = ap_const_lv2_3) and (xk_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_100_p2 <= std_logic_vector(unsigned(i13_0_reg_83) + unsigned(ap_const_lv11_1));
    icmp_ln192_fu_94_p2 <= "1" when (i13_0_reg_83 = ap_const_lv11_400) else "0";
    icmp_ln198_fu_106_p2 <= "1" when (i13_0_reg_83 = ap_const_lv11_3FF) else "0";
    xk_TDATA <= xk_data_1_data_out;

    xk_TDATA_blk_n_assign_proc : process(xk_data_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln192_reg_112, ap_enable_reg_pp0_iter2, icmp_ln192_reg_112_pp0_iter1_reg)
    begin
        if ((((icmp_ln192_reg_112_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln192_reg_112 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            xk_TDATA_blk_n <= xk_data_1_state(1);
        else 
            xk_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xk_TLAST <= xk_last_1_data_out;
    xk_TVALID <= xk_last_1_state(0);
    xk_data_1_ack_in <= xk_data_1_state(1);
    xk_data_1_ack_out <= xk_TREADY;

    xk_data_1_data_out_assign_proc : process(xk_data_1_payload_A, xk_data_1_payload_B, xk_data_1_sel)
    begin
        if ((xk_data_1_sel = ap_const_logic_1)) then 
            xk_data_1_data_out <= xk_data_1_payload_B;
        else 
            xk_data_1_data_out <= xk_data_1_payload_A;
        end if; 
    end process;

    xk_data_1_load_A <= (xk_data_1_state_cmp_full and not(xk_data_1_sel_wr));
    xk_data_1_load_B <= (xk_data_1_state_cmp_full and xk_data_1_sel_wr);
    xk_data_1_sel <= xk_data_1_sel_rd;
    xk_data_1_state_cmp_full <= '0' when (xk_data_1_state = ap_const_lv2_1) else '1';

    xk_data_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln192_reg_112, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln192_reg_112 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xk_data_1_vld_in <= ap_const_logic_1;
        else 
            xk_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xk_data_1_vld_out <= xk_data_1_state(0);

    xk_fifo_V_blk_n_assign_proc : process(xk_fifo_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln192_reg_112)
    begin
        if (((icmp_ln192_reg_112 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            xk_fifo_V_blk_n <= xk_fifo_V_empty_n;
        else 
            xk_fifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xk_fifo_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln192_reg_112, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln192_reg_112 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xk_fifo_V_read <= ap_const_logic_1;
        else 
            xk_fifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    xk_last_1_ack_in <= xk_last_1_state(1);
    xk_last_1_ack_out <= xk_TREADY;

    xk_last_1_data_out_assign_proc : process(xk_last_1_payload_A, xk_last_1_payload_B, xk_last_1_sel)
    begin
        if ((xk_last_1_sel = ap_const_logic_1)) then 
            xk_last_1_data_out <= xk_last_1_payload_B;
        else 
            xk_last_1_data_out <= xk_last_1_payload_A;
        end if; 
    end process;

    xk_last_1_load_A <= (xk_last_1_state_cmp_full and not(xk_last_1_sel_wr));
    xk_last_1_load_B <= (xk_last_1_state_cmp_full and xk_last_1_sel_wr);
    xk_last_1_sel <= xk_last_1_sel_rd;
    xk_last_1_state_cmp_full <= '0' when (xk_last_1_state = ap_const_lv2_1) else '1';

    xk_last_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln192_reg_112, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln192_reg_112 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xk_last_1_vld_in <= ap_const_logic_1;
        else 
            xk_last_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xk_last_1_vld_out <= xk_last_1_state(0);
end behav;
