-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft1d_1 is
port (
    in_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_empty_n : IN STD_LOGIC;
    in_V_read : OUT STD_LOGIC;
    out_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_V_full_n : IN STD_LOGIC;
    out_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of fft1d_1 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal fft1d_1_Block_codeRe_U0_ap_start : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_start_full_n : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_ap_done : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_ap_continue : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_ap_idle : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_ap_ready : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_start_out : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_start_write : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_config_data_V_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal fft1d_1_Block_codeRe_U0_config_data_V_1_write : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_ap_start : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_ap_done : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_ap_continue : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_ap_idle : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_ap_ready : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_in_V_read : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_xn_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft1d_1_Loop_1_proc1_U0_xn_write : STD_LOGIC;
    signal fft_configuration_U0_ap_start : STD_LOGIC;
    signal fft_configuration_U0_ap_done : STD_LOGIC;
    signal fft_configuration_U0_ap_idle : STD_LOGIC;
    signal fft_configuration_U0_ap_ready : STD_LOGIC;
    signal fft_configuration_U0_ap_continue : STD_LOGIC;
    signal fft_configuration_U0_xn_read : STD_LOGIC;
    signal fft_configuration_U0_xk_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft_configuration_U0_xk_write : STD_LOGIC;
    signal fft_configuration_U0_status_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal fft_configuration_U0_status_data_V_write : STD_LOGIC;
    signal fft_configuration_U0_config_ch_data_V_read : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_ap_start : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_ap_done : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_ap_continue : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_ap_idle : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_ap_ready : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_xk_read : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_out_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal fft1d_1_Loop_2_proc2_U0_out_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal config_data_V_1_chan_full_n : STD_LOGIC;
    signal config_data_V_1_chan_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal config_data_V_1_chan_empty_n : STD_LOGIC;
    signal xn_channel_full_n : STD_LOGIC;
    signal xn_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal xn_channel_empty_n : STD_LOGIC;
    signal xk_channel_full_n : STD_LOGIC;
    signal xk_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal xk_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_fft1d_1_Block_codeRe_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_fft1d_1_Block_codeRe_U0_ap_ready : STD_LOGIC;
    signal fft1d_1_Block_codeRe_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_fft1d_1_Loop_1_proc1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_fft1d_1_Loop_1_proc1_U0_ap_ready : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_fft_configuration_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_configuration_U0_full_n : STD_LOGIC;
    signal start_for_fft_configuration_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft_configuration_U0_empty_n : STD_LOGIC;
    signal start_for_fft1d_1_Loop_2_proc2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft1d_1_Loop_2_proc2_U0_full_n : STD_LOGIC;
    signal start_for_fft1d_1_Loop_2_proc2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fft1d_1_Loop_2_proc2_U0_empty_n : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_start_full_n : STD_LOGIC;
    signal fft1d_1_Loop_1_proc1_U0_start_write : STD_LOGIC;
    signal fft_configuration_U0_start_full_n : STD_LOGIC;
    signal fft_configuration_U0_start_write : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_start_full_n : STD_LOGIC;
    signal fft1d_1_Loop_2_proc2_U0_start_write : STD_LOGIC;

    component fft1d_1_Block_codeRe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        config_data_V_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        config_data_V_1_full_n : IN STD_LOGIC;
        config_data_V_1_write : OUT STD_LOGIC );
    end component;


    component fft1d_1_Loop_1_proc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC;
        xn_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        xn_full_n : IN STD_LOGIC;
        xn_write : OUT STD_LOGIC );
    end component;


    component fft_configuration_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        xn_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        xn_empty_n : IN STD_LOGIC;
        xn_read : OUT STD_LOGIC;
        xk_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        xk_full_n : IN STD_LOGIC;
        xk_write : OUT STD_LOGIC;
        status_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        status_data_V_full_n : IN STD_LOGIC;
        status_data_V_write : OUT STD_LOGIC;
        config_ch_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        config_ch_data_V_empty_n : IN STD_LOGIC;
        config_ch_data_V_read : OUT STD_LOGIC );
    end component;


    component fft1d_1_Loop_2_proc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xk_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        xk_empty_n : IN STD_LOGIC;
        xk_read : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fft_configuration_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fft1d_1_Loop_2_proc2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    fft1d_1_Block_codeRe_U0 : component fft1d_1_Block_codeRe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft1d_1_Block_codeRe_U0_ap_start,
        start_full_n => fft1d_1_Block_codeRe_U0_start_full_n,
        ap_done => fft1d_1_Block_codeRe_U0_ap_done,
        ap_continue => fft1d_1_Block_codeRe_U0_ap_continue,
        ap_idle => fft1d_1_Block_codeRe_U0_ap_idle,
        ap_ready => fft1d_1_Block_codeRe_U0_ap_ready,
        start_out => fft1d_1_Block_codeRe_U0_start_out,
        start_write => fft1d_1_Block_codeRe_U0_start_write,
        config_data_V_1_din => fft1d_1_Block_codeRe_U0_config_data_V_1_din,
        config_data_V_1_full_n => config_data_V_1_chan_full_n,
        config_data_V_1_write => fft1d_1_Block_codeRe_U0_config_data_V_1_write);

    fft1d_1_Loop_1_proc1_U0 : component fft1d_1_Loop_1_proc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft1d_1_Loop_1_proc1_U0_ap_start,
        ap_done => fft1d_1_Loop_1_proc1_U0_ap_done,
        ap_continue => fft1d_1_Loop_1_proc1_U0_ap_continue,
        ap_idle => fft1d_1_Loop_1_proc1_U0_ap_idle,
        ap_ready => fft1d_1_Loop_1_proc1_U0_ap_ready,
        in_V_dout => in_V_dout,
        in_V_empty_n => in_V_empty_n,
        in_V_read => fft1d_1_Loop_1_proc1_U0_in_V_read,
        xn_din => fft1d_1_Loop_1_proc1_U0_xn_din,
        xn_full_n => xn_channel_full_n,
        xn_write => fft1d_1_Loop_1_proc1_U0_xn_write);

    fft_configuration_U0 : component fft_configuration_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft_configuration_U0_ap_start,
        ap_ce => ap_const_logic_1,
        ap_done => fft_configuration_U0_ap_done,
        ap_idle => fft_configuration_U0_ap_idle,
        ap_ready => fft_configuration_U0_ap_ready,
        ap_continue => fft_configuration_U0_ap_continue,
        xn_dout => xn_channel_dout,
        xn_empty_n => xn_channel_empty_n,
        xn_read => fft_configuration_U0_xn_read,
        xk_din => fft_configuration_U0_xk_din,
        xk_full_n => xk_channel_full_n,
        xk_write => fft_configuration_U0_xk_write,
        status_data_V_din => fft_configuration_U0_status_data_V_din,
        status_data_V_full_n => ap_const_logic_1,
        status_data_V_write => fft_configuration_U0_status_data_V_write,
        config_ch_data_V_dout => config_data_V_1_chan_dout,
        config_ch_data_V_empty_n => config_data_V_1_chan_empty_n,
        config_ch_data_V_read => fft_configuration_U0_config_ch_data_V_read);

    fft1d_1_Loop_2_proc2_U0 : component fft1d_1_Loop_2_proc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fft1d_1_Loop_2_proc2_U0_ap_start,
        ap_done => fft1d_1_Loop_2_proc2_U0_ap_done,
        ap_continue => fft1d_1_Loop_2_proc2_U0_ap_continue,
        ap_idle => fft1d_1_Loop_2_proc2_U0_ap_idle,
        ap_ready => fft1d_1_Loop_2_proc2_U0_ap_ready,
        xk_dout => xk_channel_dout,
        xk_empty_n => xk_channel_empty_n,
        xk_read => fft1d_1_Loop_2_proc2_U0_xk_read,
        out_V_din => fft1d_1_Loop_2_proc2_U0_out_V_din,
        out_V_full_n => out_V_full_n,
        out_V_write => fft1d_1_Loop_2_proc2_U0_out_V_write);

    config_data_V_1_chan_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft1d_1_Block_codeRe_U0_config_data_V_1_din,
        if_full_n => config_data_V_1_chan_full_n,
        if_write => fft1d_1_Block_codeRe_U0_config_data_V_1_write,
        if_dout => config_data_V_1_chan_dout,
        if_empty_n => config_data_V_1_chan_empty_n,
        if_read => fft_configuration_U0_config_ch_data_V_read);

    xn_channel_U : component fifo_w64_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft1d_1_Loop_1_proc1_U0_xn_din,
        if_full_n => xn_channel_full_n,
        if_write => fft1d_1_Loop_1_proc1_U0_xn_write,
        if_dout => xn_channel_dout,
        if_empty_n => xn_channel_empty_n,
        if_read => fft_configuration_U0_xn_read);

    xk_channel_U : component fifo_w64_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fft_configuration_U0_xk_din,
        if_full_n => xk_channel_full_n,
        if_write => fft_configuration_U0_xk_write,
        if_dout => xk_channel_dout,
        if_empty_n => xk_channel_empty_n,
        if_read => fft1d_1_Loop_2_proc2_U0_xk_read);

    start_for_fft_configuration_U0_U : component start_for_fft_configuration_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft_configuration_U0_din,
        if_full_n => start_for_fft_configuration_U0_full_n,
        if_write => fft1d_1_Block_codeRe_U0_start_write,
        if_dout => start_for_fft_configuration_U0_dout,
        if_empty_n => start_for_fft_configuration_U0_empty_n,
        if_read => fft_configuration_U0_ap_ready);

    start_for_fft1d_1_Loop_2_proc2_U0_U : component start_for_fft1d_1_Loop_2_proc2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fft1d_1_Loop_2_proc2_U0_din,
        if_full_n => start_for_fft1d_1_Loop_2_proc2_U0_full_n,
        if_write => fft1d_1_Block_codeRe_U0_start_write,
        if_dout => start_for_fft1d_1_Loop_2_proc2_U0_dout,
        if_empty_n => start_for_fft1d_1_Loop_2_proc2_U0_empty_n,
        if_read => fft1d_1_Loop_2_proc2_U0_ap_ready);





    ap_sync_reg_fft1d_1_Block_codeRe_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_fft1d_1_Block_codeRe_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_fft1d_1_Block_codeRe_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_fft1d_1_Block_codeRe_U0_ap_ready <= ap_sync_fft1d_1_Block_codeRe_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_fft1d_1_Loop_1_proc1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_fft1d_1_Loop_1_proc1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_fft1d_1_Loop_1_proc1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_fft1d_1_Loop_1_proc1_U0_ap_ready <= ap_sync_fft1d_1_Loop_1_proc1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    fft1d_1_Block_codeRe_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fft1d_1_Block_codeRe_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                fft1d_1_Block_codeRe_U0_ap_ready_count <= std_logic_vector(unsigned(fft1d_1_Block_codeRe_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (fft1d_1_Block_codeRe_U0_ap_ready = ap_const_logic_1))) then 
                fft1d_1_Block_codeRe_U0_ap_ready_count <= std_logic_vector(unsigned(fft1d_1_Block_codeRe_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    fft1d_1_Loop_1_proc1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fft1d_1_Loop_1_proc1_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                fft1d_1_Loop_1_proc1_U0_ap_ready_count <= std_logic_vector(unsigned(fft1d_1_Loop_1_proc1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (fft1d_1_Loop_1_proc1_U0_ap_ready = ap_const_logic_1))) then 
                fft1d_1_Loop_1_proc1_U0_ap_ready_count <= std_logic_vector(unsigned(fft1d_1_Loop_1_proc1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= fft1d_1_Loop_2_proc2_U0_ap_done;
    ap_idle <= (fft_configuration_U0_ap_idle and fft1d_1_Loop_2_proc2_U0_ap_idle and fft1d_1_Loop_1_proc1_U0_ap_idle and fft1d_1_Block_codeRe_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= fft1d_1_Loop_2_proc2_U0_ap_done;
    ap_sync_fft1d_1_Block_codeRe_U0_ap_ready <= (fft1d_1_Block_codeRe_U0_ap_ready or ap_sync_reg_fft1d_1_Block_codeRe_U0_ap_ready);
    ap_sync_fft1d_1_Loop_1_proc1_U0_ap_ready <= (fft1d_1_Loop_1_proc1_U0_ap_ready or ap_sync_reg_fft1d_1_Loop_1_proc1_U0_ap_ready);
    ap_sync_ready <= (ap_sync_fft1d_1_Loop_1_proc1_U0_ap_ready and ap_sync_fft1d_1_Block_codeRe_U0_ap_ready);
    fft1d_1_Block_codeRe_U0_ap_continue <= ap_const_logic_1;
    fft1d_1_Block_codeRe_U0_ap_start <= ((ap_sync_reg_fft1d_1_Block_codeRe_U0_ap_ready xor ap_const_logic_1) and ap_start);
    fft1d_1_Block_codeRe_U0_start_full_n <= (start_for_fft_configuration_U0_full_n and start_for_fft1d_1_Loop_2_proc2_U0_full_n);
    fft1d_1_Loop_1_proc1_U0_ap_continue <= ap_const_logic_1;
    fft1d_1_Loop_1_proc1_U0_ap_start <= ((ap_sync_reg_fft1d_1_Loop_1_proc1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    fft1d_1_Loop_1_proc1_U0_start_full_n <= ap_const_logic_1;
    fft1d_1_Loop_1_proc1_U0_start_write <= ap_const_logic_0;
    fft1d_1_Loop_2_proc2_U0_ap_continue <= ap_continue;
    fft1d_1_Loop_2_proc2_U0_ap_start <= start_for_fft1d_1_Loop_2_proc2_U0_empty_n;
    fft1d_1_Loop_2_proc2_U0_start_full_n <= ap_const_logic_1;
    fft1d_1_Loop_2_proc2_U0_start_write <= ap_const_logic_0;
    fft_configuration_U0_ap_continue <= ap_const_logic_1;
    fft_configuration_U0_ap_start <= start_for_fft_configuration_U0_empty_n;
    fft_configuration_U0_start_full_n <= ap_const_logic_1;
    fft_configuration_U0_start_write <= ap_const_logic_0;
    in_V_read <= fft1d_1_Loop_1_proc1_U0_in_V_read;
    out_V_din <= fft1d_1_Loop_2_proc2_U0_out_V_din;
    out_V_write <= fft1d_1_Loop_2_proc2_U0_out_V_write;
    start_for_fft1d_1_Loop_2_proc2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fft_configuration_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
