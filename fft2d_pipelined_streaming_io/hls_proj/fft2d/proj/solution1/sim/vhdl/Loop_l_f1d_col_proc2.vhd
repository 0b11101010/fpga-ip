-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_l_f1d_col_proc2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    xk_mid_col_fifo_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    xk_mid_col_fifo_V_full_n : IN STD_LOGIC;
    xk_mid_col_fifo_V_write : OUT STD_LOGIC;
    arr0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    arr0_ce0 : OUT STD_LOGIC;
    arr0_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Loop_l_f1d_col_proc2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal i_fu_144_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_197 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_154_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_202 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln155_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_168_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_210 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln157_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_220 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fft1d_0_fu_131_in_V_read : STD_LOGIC;
    signal grp_fft1d_0_fu_131_out_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft1d_0_fu_131_out_V_write : STD_LOGIC;
    signal grp_fft1d_0_fu_131_ap_start : STD_LOGIC;
    signal grp_fft1d_0_fu_131_ap_done : STD_LOGIC;
    signal grp_fft1d_0_fu_131_ap_ready : STD_LOGIC;
    signal grp_fft1d_0_fu_131_ap_idle : STD_LOGIC;
    signal grp_fft1d_0_fu_131_ap_continue : STD_LOGIC;
    signal i4_0_reg_109 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_sync_grp_fft1d_0_fu_131_ap_ready : STD_LOGIC;
    signal ap_sync_grp_fft1d_0_fu_131_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal j5_0_reg_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal xn_mid_col_fifo_V_full_n : STD_LOGIC;
    signal xn_mid_col_fifo_V_write : STD_LOGIC;
    signal grp_fft1d_0_fu_131_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft1d_0_fu_131_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft1d_0_fu_131_ap_done : STD_LOGIC := '0';
    signal xn_mid_col_fifo_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal xn_mid_col_fifo_V_empty_n : STD_LOGIC;
    signal xn_mid_col_fifo_V_read : STD_LOGIC;
    signal zext_ln160_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln159_fu_150_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln159_fu_174_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_fu_178_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component fft1d_0 IS
    port (
        in_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_V_empty_n : IN STD_LOGIC;
        in_V_read : OUT STD_LOGIC;
        out_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_V_full_n : IN STD_LOGIC;
        out_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fifo_w64_d32_A_x1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_fft1d_0_fu_131 : component fft1d_0
    port map (
        in_V_dout => xn_mid_col_fifo_V_dout,
        in_V_empty_n => xn_mid_col_fifo_V_empty_n,
        in_V_read => grp_fft1d_0_fu_131_in_V_read,
        out_V_din => grp_fft1d_0_fu_131_out_V_din,
        out_V_full_n => xk_mid_col_fifo_V_full_n,
        out_V_write => grp_fft1d_0_fu_131_out_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft1d_0_fu_131_ap_start,
        ap_done => grp_fft1d_0_fu_131_ap_done,
        ap_ready => grp_fft1d_0_fu_131_ap_ready,
        ap_idle => grp_fft1d_0_fu_131_ap_idle,
        ap_continue => grp_fft1d_0_fu_131_ap_continue);

    xn_mid_col_fifo_V_fifo_U : component fifo_w64_d32_A_x1
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tmp_4_reg_220,
        if_full_n => xn_mid_col_fifo_V_full_n,
        if_write => xn_mid_col_fifo_V_write,
        if_dout => xn_mid_col_fifo_V_dout,
        if_empty_n => xn_mid_col_fifo_V_empty_n,
        if_read => xn_mid_col_fifo_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln155_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft1d_0_fu_131_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft1d_0_fu_131_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                    ap_sync_reg_grp_fft1d_0_fu_131_ap_done <= ap_const_logic_0;
                elsif ((grp_fft1d_0_fu_131_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft1d_0_fu_131_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft1d_0_fu_131_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft1d_0_fu_131_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                    ap_sync_reg_grp_fft1d_0_fu_131_ap_ready <= ap_const_logic_0;
                elsif ((grp_fft1d_0_fu_131_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft1d_0_fu_131_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_fft1d_0_fu_131_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft1d_0_fu_131_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln157_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_sync_grp_fft1d_0_fu_131_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
                    grp_fft1d_0_fu_131_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft1d_0_fu_131_ap_ready = ap_const_logic_1)) then 
                    grp_fft1d_0_fu_131_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i4_0_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i4_0_reg_109 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                i4_0_reg_109 <= i_reg_197;
            end if; 
        end if;
    end process;

    j5_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (xn_mid_col_fifo_V_full_n = ap_const_logic_1))) then 
                j5_0_reg_120 <= j_reg_210;
            elsif (((icmp_ln155_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j5_0_reg_120 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_197 <= i_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_210 <= j_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln155_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_202(9 downto 5) <= shl_ln_fu_154_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_4_reg_220 <= arr0_q0;
            end if;
        end if;
    end process;
    shl_ln_reg_202(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln155_fu_138_p2, ap_CS_fsm_state3, icmp_ln157_fu_162_p2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done, ap_CS_fsm_state5, xn_mid_col_fifo_V_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln155_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln157_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (xn_mid_col_fifo_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(ap_sync_grp_fft1d_0_fu_131_ap_ready, ap_sync_grp_fft1d_0_fu_131_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((ap_sync_grp_fft1d_0_fu_131_ap_ready and ap_sync_grp_fft1d_0_fu_131_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln155_fu_138_p2)
    begin
        if (((icmp_ln155_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_sync_grp_fft1d_0_fu_131_ap_done <= (grp_fft1d_0_fu_131_ap_done or ap_sync_reg_grp_fft1d_0_fu_131_ap_done);
    ap_sync_grp_fft1d_0_fu_131_ap_ready <= (grp_fft1d_0_fu_131_ap_ready or ap_sync_reg_grp_fft1d_0_fu_131_ap_ready);
    arr0_address0 <= zext_ln160_fu_183_p1(10 - 1 downto 0);

    arr0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arr0_ce0 <= ap_const_logic_1;
        else 
            arr0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fft1d_0_fu_131_ap_continue_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
            grp_fft1d_0_fu_131_ap_continue <= ap_const_logic_1;
        else 
            grp_fft1d_0_fu_131_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft1d_0_fu_131_ap_start <= grp_fft1d_0_fu_131_ap_start_reg;
    i_fu_144_p2 <= std_logic_vector(unsigned(i4_0_reg_109) + unsigned(ap_const_lv6_1));
    icmp_ln155_fu_138_p2 <= "1" when (i4_0_reg_109 = ap_const_lv6_20) else "0";
    icmp_ln157_fu_162_p2 <= "1" when (j5_0_reg_120 = ap_const_lv6_20) else "0";
    index_fu_178_p2 <= std_logic_vector(unsigned(shl_ln_reg_202) + unsigned(zext_ln159_fu_174_p1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln155_fu_138_p2)
    begin
        if (((icmp_ln155_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_168_p2 <= std_logic_vector(unsigned(j5_0_reg_120) + unsigned(ap_const_lv6_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    shl_ln_fu_154_p3 <= (trunc_ln159_fu_150_p1 & ap_const_lv5_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln159_fu_150_p1 <= i4_0_reg_109(5 - 1 downto 0);
    xk_mid_col_fifo_V_din <= grp_fft1d_0_fu_131_out_V_din;

    xk_mid_col_fifo_V_write_assign_proc : process(grp_fft1d_0_fu_131_out_V_write, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xk_mid_col_fifo_V_write <= grp_fft1d_0_fu_131_out_V_write;
        else 
            xk_mid_col_fifo_V_write <= ap_const_logic_0;
        end if; 
    end process;


    xn_mid_col_fifo_V_read_assign_proc : process(grp_fft1d_0_fu_131_in_V_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xn_mid_col_fifo_V_read <= grp_fft1d_0_fu_131_in_V_read;
        else 
            xn_mid_col_fifo_V_read <= ap_const_logic_0;
        end if; 
    end process;


    xn_mid_col_fifo_V_write_assign_proc : process(ap_CS_fsm_state5, xn_mid_col_fifo_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (xn_mid_col_fifo_V_full_n = ap_const_logic_1))) then 
            xn_mid_col_fifo_V_write <= ap_const_logic_1;
        else 
            xn_mid_col_fifo_V_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln159_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_0_reg_120),10));
    zext_ln160_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_178_p2),64));
end behav;
